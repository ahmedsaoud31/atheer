<?php

namespace App\Repositories\Atheer\{{ groupUpperName }};

use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Schema;

use App\Models{{ modelNameSpace }}\{{ itemUpperName }} as MainModel;

class {{ itemUpperName }}Repository
{
    protected $fillable = {{ fillable }};
    
    public function model()
    {
        return new MainModel;
    }

    public function query()
    {
        return $this->model()->query();
    }

    public function all()
    {
        return $this->model()->all();
    }
    
    public function create($inputs)
    {
        if (Schema::hasColumn($this->model()->getTable(), 'created_at'))
        {
            $inputs = Arr::add($inputs, 'created_at', date('Y-m-d h:i:s'));
        }
        return $this->model()->insertGetId($inputs);
    }

    public function update($record, $inputs)
    {
        if (Schema::hasColumn($this->model()->getTable(), 'updated_at'))
        {
            $inputs = Arr::add($inputs, 'updated_at', date('Y-m-d h:i:s'));
            if(!in_array('updated_at', $this->fillable))
            {
                $this->fillable[] = 'updated_at';
            }
        }
        return $record->fillable(array_merge($record->getFillable(), $this->fillable))->fill($inputs)->save();
    }

    public function byId($id)
    {
        return $this->query()->whereId($id)->firstOrFail();
    }
    
    public function paginate($pages)
    {
        return $this->query()->latest()->paginate($pages);
    }
    
    public function first($id)
    {
        return $this->query()->whereId($id)->first();
    }
    
    public function firstOrFail($id)
    {
        return $this->query()->whereId($id)->firstOrFail();
    }

    public function deleteById($id)
    {
        return $record = $this->byId($id)?$record->delete():false;
    }
}